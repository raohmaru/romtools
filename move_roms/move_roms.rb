require 'fileutils'
require 'zip'

# Options
input_file = '.'
zip_file = nil
output_dir = ''
romlist = false
inc_clones = false
dry_run = false
copy = false
# Variables
rom_count = 0
rom_total = 0
roms_found = {}
missing = []
# Const
RX_EXT_ZIP = /\.zip$/
HELP = <<eof
Move ROMs 1.1
-------------
Moves zipped ROMs files from the input directory or ZIP file to the specified output directory, given a ROM list generated by roms_filter.rb or arcade_roms_filter.rb.

Usage:
    ruby move_roms.rb romlist -i romDirOrZip [-o outputdir -c -cp -d]
    
Arguments:
    romlist         Source file with the ROM list
    -i, --input     Directory or ZIP file with the zipped ROMs
    -o, --output    Output directory were to move the ROMs. If omitted will create the dir moved/.
    -c, --clones    Include clones (MAME)
    -d, --dryrun    Dry run mode (no file is moved)
    -cp, --copy     Copy the ROMs to the output directory instead of moving them. Ignored if input is a ZIP file.
    -h, --help      Display this help
eof

unless ARGV.empty?
  ARGV.each_with_index { |item, i|
    if item == "-i" || item == "--input"
      input_file = ARGV[i+1]
    elsif item == "-o" || item == "--output"
      output_dir = ARGV[i+1]
    elsif item == "-c" || item == "--clones"
      inc_clones = true
    elsif item == "-d" || item == "--dryrun"
      dry_run = true
      puts "Running in dry-run mode"
    elsif item == "-cp" || item == "--copy"
      copy = true
    elsif item == "-h" || item == "--help"
      puts HELP
      exit
    else
      if !romlist && File.exists?(item) && !File.directory?(item)
        romlist = item
      end
    end
  }
else
  puts HELP
  exit
end

if !romlist
  puts "ERROR: romlist file not found. Type `ruby move_roms.rb -h` for help."
  exit
end

if !File.directory?(input_file) && !File.file?(input_file)
  puts "ERROR: Input directory or ZIP file does not exists. Type `ruby move_roms.rb -h` for help."
  exit
elsif File.file?(input_file)
  zip_file = Zip::File.open(input_file)
end

if output_dir == ''
  output_dir = File.join(File.expand_path(File.dirname(input_file)), 'moved')
end

if !File.directory?(output_dir) && !dry_run
  Dir.mkdir output_dir
end

class Entry
  attr_accessor :input_file
  attr_accessor :zip_file
  attr_accessor :output_dir
  attr_accessor :dry_run
  def initialize(input_file, zip_file, output_dir, dry_run)
    @input_file = input_file
    @zip_file = zip_file
    @output_dir = output_dir
    @dry_run = dry_run
  end
  def clones(rom)
    filename = File.basename(rom, '.zip') + "*.zip"
    if @zip_file
        @zip_file.glob(filename) do |r|
          yield r
        end  
    else
      Dir.chdir(@input_file) do
        Dir.glob(filename) do |r|
          yield r
        end
      end
    end
  end
  def extract(rom, copy)
    if @zip_file
      entry = @zip_file.find_entry(rom)
      if entry
        puts "Extracting #{entry.name}..."
        @zip_file.extract(entry.name, File.join(@output_dir, entry.name)) unless @dry_run
        return true
      end
    else
      romfile = File.join(@input_file, rom)
      if File.exists? romfile
        args = [romfile, File.join(@output_dir, rom)]
        if copy
          puts "Copying #{rom}..."
          FileUtils.cp(*args) unless @dry_run
        else
          puts "Moving #{rom}..."
          FileUtils.mv(*args) unless @dry_run
        end
        return true
      end
    end
  end
end

entry = Entry.new(input_file, zip_file, output_dir, dry_run)

File.open(romlist, "rt") do |f|
  f.each_line do |line|
    roms = []
    rom = line.rstrip
    if inc_clones
      entry.clones(rom) do |r|
        next if roms_found[r]
        roms.push r if r != rom
        roms_found[r] = true
      end
    end
    rom += '.zip' unless RX_EXT_ZIP =~ rom
    roms.push rom
    roms.each do |r|
      rom_total += 1
      if entry.extract(r, copy)
        rom_count += 1
      else
        puts "ROM not found: #{r}"
        missing.push(rom)
      end
    end
  end
  action = 'Moved'
  action = 'Copied' if copy
  action = 'Extracted' if zip_file
  puts "\n#{action} #{rom_count}/#{rom_total} ROMs to the directory #{output_dir}/"
  if missing.length > 0
    puts "#{missing.length} ROM(s) not found: " + missing.join(", ")
  end
end
# File is closed automatically at end of block, no need to close it